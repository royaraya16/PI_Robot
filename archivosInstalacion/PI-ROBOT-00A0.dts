/*
 * Device Tree Overlay para PI_Robot
 * Roy Araya 2015
 *
 */
 
/*

pinmux control byte map encontrado en datasheet BLABLABLA buscar DerekMolloy
Bit 5: 1 - Input, 0 - Output
Bit 4: 1 - Pull up, 0 - Pull down
Bit 3: 1 - Pull disabled, 0 - Pull enabled
Bit 2 \
Bit 1 |- Mode
Bit 0 /
 */
 
 /* Basado en Robotics_Cape de
  * Strawson Design 2013
  */
 
/dts-v1/;
/plugin/; 

/ {
    compatible = "ti,beaglebone-black";

    /* identification */
    part-number = "PI-ROBOT";

    /* version */
    version = "00A0";
	
	exclusive-use =
		"P8.7",		/*LED_RED*/
		"P8.8",		/*LED_GRN*/
		"P8.9",		/*PAUSE_BTN*/
		"P8.10",	/*MODE_BTN*/
		
		"P8.11",	/*QEP_2B*/
		"P8.12",	/*QEP_2A*/
		"eqep2",
		
		"P8.14",	/*LED_1*/
		"P8.15",	/*LED_2*/
		"P8.16",	/*LED_3*/
		"P8.17",	/*LED_4*/
		
		"P8.19",	/*PWM_2A*/
		"ehrpwm2A", 
		
		
		"P8.35",	/*QEP_1A*/
		"P8.33",	/*QEP_1B*/
		"eqep1", 
		
		"P8.38",	/*MDIR_2B*/
		
		/*
		
		*/
		 
		"P9.12",	/*MDIR_1A*/
		"P9.13",	/*MDIR_1B*/
				
		"P9.14",	/*PWM_1A*/
		"ehrpwm1A",
		
		"P9.15",	/*MDIR_2A*/
		
		"P9.25",	/*IMU_INT*/

		
		"P9.35", 	/*V_DIV_BAT*/
		"P9.36", 	/*V_DIV_DC*/
		"tscadc",
		
		
		"P9.41",	/*MOT_STBY*/		
		
	
    fragment@0 {
		target = <&am33xx_pinmux>;
		__overlay__ {
			/****************************************/
			/* 			PWM pinmux					*/
			/****************************************/
			pwm_P9_14: pinmux_pwm_P9_14_pins {
				pinctrl-single,pins = <0x048  0x6>; /* P9_14 (ZCZ ball U14) | MODE 6 */
			};
			pwm_P8_19: pinmux_pwm_P8_19_pins {
				pinctrl-single,pins = <0x020  0x4>; /* P8_19 (ZCZ ball U10) | MODE 4 */
			};


			/****************************************/
			/* 			eQEP pinmux					*/
			/****************************************/
			pinctrl_eqep1: pinctrl_eqep1_pins {
                pinctrl-single,pins = <					 				   
					0x0D4 0x32  /* P8_33 = GPIO0_9 = EQEP1B_in, MODE2 */
					0x0D0 0x32  /* P8_35 = GPIO0_8 = EQEP1A_in, MODE2 */
                >;
            };	
			pinctrl_eqep2: pinctrl_eqep2_pins {
                pinctrl-single,pins = <					 				   
					0x030 0x3C  /* P8_12 = EQEP2A_in, MODE4 */
					0x034 0x3C  /* P8_11 = EQEP2B_in, MODE4 */
                >;
            };
			

			/****************************************/
			/* 		GPIO interrupt pinmux			*/
			/****************************************/
			interrupt_pins: pinmux_interrupt_pins{
				pinctrl-single,pins = <
					0x09c 0x37	/*P8.9  Pause BUTTON, input pullup*/
					0x098 0x37	/*P8.10 MODE BUTTON input pullup*/
					0x1AC 0x37	/*P9.25 MPU-9150 INTERRUPT IN*/
				>;
			};
			
			/****************************************/
			/* 		GPIO output pinmux				*/
			/****************************************/
			gpio_helper_pins: pinmux_gpio_helper_pins {
				pinctrl-single,pins = <
					0x090 0x0F	/*P8.7 MODE7 | OUTPUT*/
					0x094 0x0F	/*P8.8 LED_GRN*/
					0x028 0x0F	/*P8.14 LED_1*/
					0x03C 0x0F	/*P8.15 LED_2*/
					0x038 0x0F	/*P8.16 LED_3*/
					0x02C 0x0F	/*P8.17 LED_4*/
					0x0c4 0x0F	/*P8.38 MDIR_2B*/
								
					0x078 0x0F	/*P9.12 MDIR_1A*/
					0x074 0x0F	/*P9.13 MDIR_1B*/
					0x040 0x0F	/*P9.15 MDIR_2A*/
					0x1b4 0x0F	/*P9.41 MOT_STBY*/
				>;
			};			
		};
	};

	fragment@1 {
		target = <&epwmss0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@2 {
		target = <&ehrpwm0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@3 {
		target = <&ecap0>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@4 {
		target = <&epwmss1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@5 {
		target = <&ehrpwm1>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@6 {
		target = <&epwmss2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@7 {
		target = <&ehrpwm2>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@8 {
		target = <&ecap2>;
		__overlay__ {
			status = "okay";
		};
	};
	
	fragment@9 {
		target = <&ocp>;
		__overlay__ {
			pwm_test_P9_14 {
				compatible	= "pwm_test";
				pwms 		= <&ehrpwm1 0 25000 1>;
				pwm-names 	= "PWM_P9_14";
			    pinctrl-names	= "default";
			    pinctrl-0	= <&pwm_P9_14>;
				enabled		= <1>;
				duty		= <0>;
				status 		= "okay";
			};
		};
	};

	fragment@10 {
		target = <&ocp>;
		__overlay__ {
			pwm_test_P8_19 {
				compatible	= "pwm_test";
				pwms 		= <&ehrpwm2 0 25000 1>;
				pwm-names 	= "PWM_P8_19";

				pinctrl-names	= "default";
				pinctrl-0	= <&pwm_P8_19>;

				enabled		= <1>;
				duty		= <0>;
				status 		= "okay";
			};
		};
	};
	
	fragment@11 {
		target = <&ocp>;
		__overlay__ {
			/* avoid stupid warning */
			#address-cells = <1>;
			#size-cells = <1>;

			tscadc {
				compatible = "ti,ti-tscadc";
				reg = <0x44e0d000 0x1000>;

				interrupt-parent = <&intc>;
				interrupts = <16>;
				ti,hwmods = "adc_tsc";
				status = "okay";

				adc {
					ti,adc-channels = <0 1 2 3 4 5 6 7>;
				};
			};

			test_helper: helper {
				compatible = "bone-iio-helper";
				vsense-name  = "AIN0", "AIN1", "AIN2", "AIN3", "AIN4", "AIN5", "AIN6", "AIN7";
				vsense-scale = <100     100     100     100     100     100     100     100>;
				status = "okay";
			};
		};
	};
	
	
	fragment@12 {
        target = <&ocp>;
        __overlay__ {            
            #address-cells = <1>;
            #size-cells = <1>;                            

            gpio_keys {
                compatible = "gpio-keys";
                pinctrl-names = "default";
                pinctrl-0 = <&interrupt_pins>;
                #address-cells = <1>;
                #size-cells = <0>;

                switch_x1 {
                    label = "PAUSE_BTN";
                    debounce_interval = <50>;
                    linux,code = <1>;
                    gpios = <&gpio3 5 0x5>; /* really gpio_2[5] */
                    gpio-key,wakeup;
                };                
                switch_x2 {
                    label = "MODE_BTN";
                    debounce_interval = <50>;
                    linux,code = <2>;
                    gpios = <&gpio3 4 0x5>; /*really gpio_2[4]*/
                    gpio-key,wakeup;
                };  
            };
        };
    };

    
    fragment@13 {
    	target = <&eqep1>;
    	__overlay__ {
            pinctrl-names = "default";
            pinctrl-0 = <&pinctrl_eqep1>;
            
            count_mode = <0>;  /* 0 - Quadrature mode, normal 90 phase offset cha & chb.  1 - Direction mode.  cha input = clock, chb input = direction */
            swap_inputs = <0>; /* Are channel A and channel B swapped? (0 - no, 1 - yes) */
            invert_qa = <1>;   /* Should we invert the channel A input?  */
            invert_qb = <1>;   /* Should we invert the channel B input? I invert these because my encoder outputs drive transistors that pull down the pins */
            invert_qi = <0>;   /* Should we invert the index input? */
            invert_qs = <0>;   /* Should we invert the strobe input? */
            
	        status = "okay";
    	};
    };

    fragment@14 {
    	target = <&eqep2>;
    	__overlay__ {
            pinctrl-names = "default";
            pinctrl-0 = <&pinctrl_eqep2>;
            
            count_mode = <0>;  /* 0 - Quadrature mode, normal 90 phase offset cha & chb.  1 - Direction mode.  cha input = clock, chb input = direction */
            swap_inputs = <0>; /* Are channel A and channel B swapped? (0 - no, 1 - yes) */
            invert_qa = <1>;   /* Should we invert the channel A input?  */
            invert_qb = <1>;   /* Should we invert the channel B input? I invert these because my encoder outputs drive transistors that pull down the pins */
            invert_qi = <0>;   /* Should we invert the index input? */
            invert_qs = <0>;   /* Should we invert the strobe input? */
            
	        status = "okay";
    	};
    };
};
